// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: addresses.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createAddress = `-- name: CreateAddress :one
INSERT INTO ADDRESSES (
    ADDRESS_ID,
    USER_ID,
    flat_floor,
    building,
    street,
    district,
    region,
    country,
    zip_code,
    IS_DEFAULT
) VALUES(
    $1,
    $2,
    $3,
    $4,
    $5,
    $6,
    $7,
    $8,
    $9,
    $10
) RETURNING address_id, user_id, flat_floor, building, street, district, region, country, zip_code, is_default, created_at, updated_at
`

type CreateAddressParams struct {
	AddressID uuid.UUID   `json:"address_id"`
	UserID    uuid.UUID   `json:"user_id"`
	FlatFloor pgtype.Text `json:"flat_floor"`
	Building  pgtype.Text `json:"building"`
	Street    string      `json:"street"`
	District  string      `json:"district"`
	Region    string      `json:"region"`
	Country   string      `json:"country"`
	ZipCode   pgtype.Text `json:"zip_code"`
	IsDefault bool        `json:"is_default"`
}

func (q *Queries) CreateAddress(ctx context.Context, arg CreateAddressParams) (Address, error) {
	row := q.db.QueryRow(ctx, createAddress,
		arg.AddressID,
		arg.UserID,
		arg.FlatFloor,
		arg.Building,
		arg.Street,
		arg.District,
		arg.Region,
		arg.Country,
		arg.ZipCode,
		arg.IsDefault,
	)
	var i Address
	err := row.Scan(
		&i.AddressID,
		&i.UserID,
		&i.FlatFloor,
		&i.Building,
		&i.Street,
		&i.District,
		&i.Region,
		&i.Country,
		&i.ZipCode,
		&i.IsDefault,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteAddress = `-- name: DeleteAddress :exec
DELETE FROM ADDRESSES
WHERE
    ADDRESS_ID = $1 AND USER_ID = $2
`

type DeleteAddressParams struct {
	AddressID uuid.UUID `json:"address_id"`
	UserID    uuid.UUID `json:"user_id"`
}

func (q *Queries) DeleteAddress(ctx context.Context, arg DeleteAddressParams) error {
	_, err := q.db.Exec(ctx, deleteAddress, arg.AddressID, arg.UserID)
	return err
}

const getAddressesByUserID = `-- name: GetAddressesByUserID :many
SELECT 
    address_id, user_id, flat_floor, building, street, district, region, country, zip_code, is_default, created_at, updated_at
FROM 
    ADDRESSES 
WHERE 
    USER_ID = $1
`

func (q *Queries) GetAddressesByUserID(ctx context.Context, userID uuid.UUID) ([]Address, error) {
	rows, err := q.db.Query(ctx, getAddressesByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Address{}
	for rows.Next() {
		var i Address
		if err := rows.Scan(
			&i.AddressID,
			&i.UserID,
			&i.FlatFloor,
			&i.Building,
			&i.Street,
			&i.District,
			&i.Region,
			&i.Country,
			&i.ZipCode,
			&i.IsDefault,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const setAllAddresstoFalse = `-- name: SetAllAddresstoFalse :exec
UPDATE ADDRESSES
SET 
    IS_DEFAULT = FALSE
WHERE 
    user_id = $1
`

func (q *Queries) SetAllAddresstoFalse(ctx context.Context, userID uuid.UUID) error {
	_, err := q.db.Exec(ctx, setAllAddresstoFalse, userID)
	return err
}

const setDefaultAddress = `-- name: SetDefaultAddress :exec
UPDATE ADDRESSES
SET
    IS_DEFAULT = TRUE
WHERE
    ADDRESS_ID = $1 AND user_id = $2
`

type SetDefaultAddressParams struct {
	AddressID uuid.UUID `json:"address_id"`
	UserID    uuid.UUID `json:"user_id"`
}

func (q *Queries) SetDefaultAddress(ctx context.Context, arg SetDefaultAddressParams) error {
	_, err := q.db.Exec(ctx, setDefaultAddress, arg.AddressID, arg.UserID)
	return err
}

const updateAddress = `-- name: UpdateAddress :exec
UPDATE ADDRESSES
SET
    flat_floor = $3,
    building = $4,
    street = $5,
    district = $6,
    region = $7,
    country = $8,
    zip_code = $9,
    IS_DEFAULT = $10,
    UPDATED_AT = NOW()
WHERE
    ADDRESS_ID = $1 AND user_id = $2
`

type UpdateAddressParams struct {
	AddressID uuid.UUID   `json:"address_id"`
	UserID    uuid.UUID   `json:"user_id"`
	FlatFloor pgtype.Text `json:"flat_floor"`
	Building  pgtype.Text `json:"building"`
	Street    string      `json:"street"`
	District  string      `json:"district"`
	Region    string      `json:"region"`
	Country   string      `json:"country"`
	ZipCode   pgtype.Text `json:"zip_code"`
	IsDefault bool        `json:"is_default"`
}

func (q *Queries) UpdateAddress(ctx context.Context, arg UpdateAddressParams) error {
	_, err := q.db.Exec(ctx, updateAddress,
		arg.AddressID,
		arg.UserID,
		arg.FlatFloor,
		arg.Building,
		arg.Street,
		arg.District,
		arg.Region,
		arg.Country,
		arg.ZipCode,
		arg.IsDefault,
	)
	return err
}
