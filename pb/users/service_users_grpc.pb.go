// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.29.3
// source: service_users.proto

package users

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	UserService_UserInformations_FullMethodName           = "/pb.UserService/UserInformations"
	UserService_SignUp_FullMethodName                     = "/pb.UserService/SignUp"
	UserService_Login_FullMethodName                      = "/pb.UserService/Login"
	UserService_ResetEmailAfterLogin_FullMethodName       = "/pb.UserService/ResetEmailAfterLogin"
	UserService_ResetPasswordAfterLogin_FullMethodName    = "/pb.UserService/ResetPasswordAfterLogin"
	UserService_ResetPhoneNumberAfterLogin_FullMethodName = "/pb.UserService/ResetPhoneNumberAfterLogin"
)

// UserServiceClient is the client API for UserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserServiceClient interface {
	UserInformations(ctx context.Context, in *UserInformationRequest, opts ...grpc.CallOption) (*UserInformationResponse, error)
	SignUp(ctx context.Context, in *SignUpRequest, opts ...grpc.CallOption) (*SignUpResponse, error)
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	ResetEmailAfterLogin(ctx context.Context, in *ResetEmailAfterLoginRequest, opts ...grpc.CallOption) (*ResetResponse, error)
	ResetPasswordAfterLogin(ctx context.Context, in *ResetPasswordAfterLoginRequest, opts ...grpc.CallOption) (*ResetResponse, error)
	ResetPhoneNumberAfterLogin(ctx context.Context, in *ResetPhoneNumberAfterLoginRequest, opts ...grpc.CallOption) (*ResetResponse, error)
}

type userServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserServiceClient(cc grpc.ClientConnInterface) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) UserInformations(ctx context.Context, in *UserInformationRequest, opts ...grpc.CallOption) (*UserInformationResponse, error) {
	out := new(UserInformationResponse)
	err := c.cc.Invoke(ctx, UserService_UserInformations_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) SignUp(ctx context.Context, in *SignUpRequest, opts ...grpc.CallOption) (*SignUpResponse, error) {
	out := new(SignUpResponse)
	err := c.cc.Invoke(ctx, UserService_SignUp_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, UserService_Login_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) ResetEmailAfterLogin(ctx context.Context, in *ResetEmailAfterLoginRequest, opts ...grpc.CallOption) (*ResetResponse, error) {
	out := new(ResetResponse)
	err := c.cc.Invoke(ctx, UserService_ResetEmailAfterLogin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) ResetPasswordAfterLogin(ctx context.Context, in *ResetPasswordAfterLoginRequest, opts ...grpc.CallOption) (*ResetResponse, error) {
	out := new(ResetResponse)
	err := c.cc.Invoke(ctx, UserService_ResetPasswordAfterLogin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) ResetPhoneNumberAfterLogin(ctx context.Context, in *ResetPhoneNumberAfterLoginRequest, opts ...grpc.CallOption) (*ResetResponse, error) {
	out := new(ResetResponse)
	err := c.cc.Invoke(ctx, UserService_ResetPhoneNumberAfterLogin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServiceServer is the server API for UserService service.
// All implementations must embed UnimplementedUserServiceServer
// for forward compatibility
type UserServiceServer interface {
	UserInformations(context.Context, *UserInformationRequest) (*UserInformationResponse, error)
	SignUp(context.Context, *SignUpRequest) (*SignUpResponse, error)
	Login(context.Context, *LoginRequest) (*LoginResponse, error)
	ResetEmailAfterLogin(context.Context, *ResetEmailAfterLoginRequest) (*ResetResponse, error)
	ResetPasswordAfterLogin(context.Context, *ResetPasswordAfterLoginRequest) (*ResetResponse, error)
	ResetPhoneNumberAfterLogin(context.Context, *ResetPhoneNumberAfterLoginRequest) (*ResetResponse, error)
	mustEmbedUnimplementedUserServiceServer()
}

// UnimplementedUserServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUserServiceServer struct {
}

func (UnimplementedUserServiceServer) UserInformations(context.Context, *UserInformationRequest) (*UserInformationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserInformations not implemented")
}
func (UnimplementedUserServiceServer) SignUp(context.Context, *SignUpRequest) (*SignUpResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignUp not implemented")
}
func (UnimplementedUserServiceServer) Login(context.Context, *LoginRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedUserServiceServer) ResetEmailAfterLogin(context.Context, *ResetEmailAfterLoginRequest) (*ResetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetEmailAfterLogin not implemented")
}
func (UnimplementedUserServiceServer) ResetPasswordAfterLogin(context.Context, *ResetPasswordAfterLoginRequest) (*ResetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetPasswordAfterLogin not implemented")
}
func (UnimplementedUserServiceServer) ResetPhoneNumberAfterLogin(context.Context, *ResetPhoneNumberAfterLoginRequest) (*ResetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetPhoneNumberAfterLogin not implemented")
}
func (UnimplementedUserServiceServer) mustEmbedUnimplementedUserServiceServer() {}

// UnsafeUserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServiceServer will
// result in compilation errors.
type UnsafeUserServiceServer interface {
	mustEmbedUnimplementedUserServiceServer()
}

func RegisterUserServiceServer(s grpc.ServiceRegistrar, srv UserServiceServer) {
	s.RegisterService(&UserService_ServiceDesc, srv)
}

func _UserService_UserInformations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserInformationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UserInformations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UserInformations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UserInformations(ctx, req.(*UserInformationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_SignUp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignUpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).SignUp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_SignUp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).SignUp(ctx, req.(*SignUpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_ResetEmailAfterLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetEmailAfterLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).ResetEmailAfterLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_ResetEmailAfterLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).ResetEmailAfterLogin(ctx, req.(*ResetEmailAfterLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_ResetPasswordAfterLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetPasswordAfterLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).ResetPasswordAfterLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_ResetPasswordAfterLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).ResetPasswordAfterLogin(ctx, req.(*ResetPasswordAfterLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_ResetPhoneNumberAfterLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetPhoneNumberAfterLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).ResetPhoneNumberAfterLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_ResetPhoneNumberAfterLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).ResetPhoneNumberAfterLogin(ctx, req.(*ResetPhoneNumberAfterLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserService_ServiceDesc is the grpc.ServiceDesc for UserService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.UserService",
	HandlerType: (*UserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UserInformations",
			Handler:    _UserService_UserInformations_Handler,
		},
		{
			MethodName: "SignUp",
			Handler:    _UserService_SignUp_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _UserService_Login_Handler,
		},
		{
			MethodName: "ResetEmailAfterLogin",
			Handler:    _UserService_ResetEmailAfterLogin_Handler,
		},
		{
			MethodName: "ResetPasswordAfterLogin",
			Handler:    _UserService_ResetPasswordAfterLogin_Handler,
		},
		{
			MethodName: "ResetPhoneNumberAfterLogin",
			Handler:    _UserService_ResetPhoneNumberAfterLogin_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service_users.proto",
}
